schema {
  query: Query
  mutation: Mutation
}

input AddTodoInput {
  text: String!
  clientMutationId: String
}

type AddTodoPayload {
  todoEdge: TodoEdge
  viewer: User
  clientMutationId: String
}

input ChangeTodoStatusInput {
  complete: Boolean!
  id: ID!
  clientMutationId: String
}

type ChangeTodoStatusPayload {
  todo: Todo
  viewer: User
  clientMutationId: String
}

input MarkAllTodosInput {
  complete: Boolean!
  clientMutationId: String
}

type MarkAllTodosPayload {
  changedTodos: [Todo]
  viewer: User
  clientMutationId: String
}

type Mutation {
  addTodo(input: AddTodoInput!): AddTodoPayload
  changeTodoStatus(input: ChangeTodoStatusInput!): ChangeTodoStatusPayload
  markAllTodos(input: MarkAllTodosInput!): MarkAllTodosPayload
  removeCompletedTodos(input: RemoveCompletedTodosInput!): RemoveCompletedTodosPayload
  removeTodo(input: RemoveTodoInput!): RemoveTodoPayload
  renameTodo(input: RenameTodoInput!): RenameTodoPayload
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  node(id: ID!): Node
  viewer: User
  user(id: ID!): User
  todo(id: ID!): Todo
  allUsers(sort: [UserSortEnum] = [ID_ASC], before: String, after: String, first: Int, last: Int): UserConnection
  allTodos(sort: [TodoSortEnum] = [ID_ASC], before: String, after: String, first: Int, last: Int): TodoConnection
}

input RemoveCompletedTodosInput {
  clientMutationId: String
}

type RemoveCompletedTodosPayload {
  deletedTodoIds: [String]
  viewer: User
  clientMutationId: String
}

input RemoveTodoInput {
  id: ID!
  clientMutationId: String
}

type RemoveTodoPayload {
  deletedTodoId: ID
  viewer: User
  clientMutationId: String
}

input RenameTodoInput {
  id: ID!
  text: String!
  clientMutationId: String
}

type RenameTodoPayload {
  todo: Todo
  clientMutationId: String
}

type Todo implements Node {
  id: ID!
  complete: Boolean
  text: String
  userId: Int
  user: User
}

type TodoConnection {
  pageInfo: PageInfo!
  edges: [TodoEdge]!
}

type TodoEdge {
  node: Todo
  cursor: String!
}

enum TodoSortEnum {
  ID_ASC
  ID_DESC
  COMPLETE_ASC
  COMPLETE_DESC
  TEXT_ASC
  TEXT_DESC
  USER_ID_ASC
  USER_ID_DESC
}

type User implements Node {
  id: ID!
  name: String
  todos(status: String = "any", before: String, after: String, first: Int, last: Int): TodoConnection
  totalCount: Int
  completedCount: Int
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
}

type UserEdge {
  node: User
  cursor: String!
}

enum UserSortEnum {
  ID_ASC
  ID_DESC
  NAME_ASC
  NAME_DESC
}
